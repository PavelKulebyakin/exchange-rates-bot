import logging
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import CommandHandler, Application, ContextTypes, CallbackQueryHandler
from cachetools import TTLCache, cached
from config import TELEGRAM_TOKEN, EXCHANGE_RATE_API_KEY

ITEMS_PER_PAGE = 20
BASE_CACHE_TTL = 3600
LONG_CACHE_TTL = 24 * 3600

base_cache = TTLCache(maxsize=100, ttl=BASE_CACHE_TTL)
long_cache = TTLCache(maxsize=1, ttl=LONG_CACHE_TTL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    start_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üí± /rate - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏.\n"
        "üìã /list - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç.\n"
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
    )
    await update.message.reply_text(start_message)


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üí± /rate  - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏.\n"
        "üìã /list  - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç.\n"
        "‚ùì /help  - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "üí° /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /rate:\n\n"
        "üîπ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –°–®–ê (USD) –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏ (RUB), –≤–≤–µ–¥–∏—Ç–µ: /rate USD RUB\n"
        "üîπ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 100 –µ–≤—Ä–æ (EUR) –≤ —è–ø–æ–Ω—Å–∫–∏–µ –∏–µ–Ω—ã (JPY), –≤–≤–µ–¥–∏—Ç–µ: /rate EUR JPY 100\n\n"
    )
    await update.message.reply_text(help_message)


@cached(long_cache)
async def fetch_supported_currencies():
    url = f'https://v6.exchangerate-api.com/v6/{EXCHANGE_RATE_API_KEY}/codes'
    with requests.get(url) as response:
        return response


async def supported_currencies_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0) -> None:

    api_response = await fetch_supported_currencies

    if not api_response.ok:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return

    data = api_response.json()

    if data['result'] == 'error':
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {data["error-type"]}')
        return

    supported_currencies = data['supported_codes']
    total_pages = (len(supported_currencies) - 1) // ITEMS_PER_PAGE

    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    paginated_supported_currencies = supported_currencies[start:end]

    rate_message = f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã (—Å—Ç—Ä. {page + 1}/{total_pages + 1}) :\n\n'
    for currency in paginated_supported_currencies:
        rate_message += f'{currency[0]} - {currency[1]}\n'

    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ", callback_data=f'{page - 1}'))
    if page < total_pages:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'{page + 1}'))

    reply_markup = InlineKeyboardMarkup([buttons])

    if update.callback_query:
        await update.callback_query.edit_message_text(rate_message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(rate_message, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    query = update.callback_query
    await query.answer()

    page = query.data
    page = int(page)
    await supported_currencies_handler(update, context, page)


@cached(base_cache)
async def fetch_pair_conversion(base_currency: str, target_currency: str, amount: str):
    url = f'https://v6.exchangerate-api.com/v6/{EXCHANGE_RATE_API_KEY}/pair/{base_currency}/{target_currency}/{amount}'
    with requests.get(url) as response:
        return response


async def pair_conversion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    if not context.args or len(context.args) < 2:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: /rate RUB USD')
        return

    base_currency = context.args[0]
    target_currency = context.args[1]

    if not (len(base_currency) == 3 and len(target_currency) == 3
            and base_currency.isalpha() and target_currency.isalpha()):
        await update.message.reply_text('–ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç—Ä–µ—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤. –ü—Ä–∏–º–µ—Ä: RUB')
        return

    amount = 1

    if len(context.args) == 3 and not context.args[2].isdigit():
        await update.message.reply_text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä—ã.\n'
                                        '–ü—Ä–∏–º–µ—Ä: /rate RUB USD 100.')
        return

    if len(context.args) == 3 and context.args[2].isdigit():
        amount = context.args[2]

    api_response = await fetch_pair_conversion(base_currency, target_currency, amount)

    if api_response.status_code == 404:
        error_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã.'
        await update.message.reply_text(error_message)
        return

    if not api_response.ok:
        error_message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        await update.message.reply_text(error_message)
        return

    data = api_response.json()
    conversion_result = data['conversion_result']
    reply_message = f"–ö—É—Ä—Å –æ–±–º–µ–Ω–∞ : {amount} {base_currency} = {conversion_result} {target_currency}"

    await update.message.reply_text(reply_message)


async def post_init(application: Application) -> None:
    bot_commands = [
        BotCommand("rate", "–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(bot_commands)


def main() -> None:

    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    handlers = [
        CommandHandler("start", start_handler),
        CommandHandler("help", help_handler),
        CommandHandler("list", supported_currencies_handler),
        CommandHandler("rate", pair_conversion_handler),
        CallbackQueryHandler(button_handler)
    ]

    application.add_handlers(handlers)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
